const uint8_t ascii_to_base64[128] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x3F,
  0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
  0x3C, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
  0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
  0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
  0x17, 0x18, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
  0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
  0x29, 0x2A, 0x28, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
  0x31, 0x32, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* base64_decode:
      Description:
        Decode a base64 encoded string to plain text
      Parameters:
        encoded_string: a base64 encoded string
      Return value:
        the decoded string
*/
static String base64_decode(String encoded_string) {
  int len_encoded = encoded_string.length();
  if (!len_encoded) {
    return String(0x00);
  }
  char bytes_encoded[len_encoded + 1];
  encoded_string.toCharArray(bytes_encoded, len_encoded + 1);
  int len_decoded = len_encoded / 4 * 3;
  char bytes_decoded[len_decoded + 1];
  int pos_in = 0;
  int pos_out = 0;
  while (pos_in < len_encoded) {
    unsigned int in_0 = ascii_to_base64[bytes_encoded[pos_in + 0]];
    unsigned int in_1 = ascii_to_base64[bytes_encoded[pos_in + 1]];
    unsigned int in_2 = ascii_to_base64[bytes_encoded[pos_in + 2]];
    unsigned int in_3 = ascii_to_base64[bytes_encoded[pos_in + 3]];
    unsigned int out_1_end = in_2 ? ((in_2 & 0x3c) >> 2) : in_2;
    unsigned int out_2_start = in_2 ? ((in_2 & 0x03) << 6) : in_2;
    bytes_decoded[pos_out] = ((in_0 << 2) + ((in_1 & 0x30) >> 4));
    bytes_decoded[pos_out + 1] = (((in_1 & 0x0f) << 4) + out_1_end);
    bytes_decoded[pos_out + 2] = (out_2_start + in_3);
    pos_in += 4;
    pos_out += 3;
  }
  bytes_decoded[pos_out] = 0x00;
  return String(bytes_decoded);
}
